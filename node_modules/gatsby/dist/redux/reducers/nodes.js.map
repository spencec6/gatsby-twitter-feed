{"version":3,"sources":["../../../src/redux/reducers/nodes.js"],"names":["_","require","parentChildrenMap","Map","module","exports","state","action","newState","type","findChildrenRecursively","children","concat","map","newChildren","get","child","delete","descendantNodes","payload","id","omit","set"],"mappings":";;;;;;;;AAAA,IAAMA,IAAIC,QAAS,QAAT,CAAV;;AAEA,IAAMC,oBAAoB,IAAIC,GAAJ,EAA1B;;AAEAC,OAAOC,OAAP,GAAiB,YAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACvC,MAAIC,iBAAJ;AACA,UAAQD,OAAOE,IAAf;AACE,SAAM,cAAN;AACE,aAAO,EAAP;AACF,SAAM,aAAN;AAAoB;AAClB;AACA;AACA,YAAMC,0BAA0B,SAA1BA,uBAA0B,GAAmB;AAAA;;AAAA,cAAlBC,QAAkB,uEAAP,EAAO;;AACjDA,qBAAW,uBAASC,MAAT,kBACND,SAASE,GAAT,CAAa,iBAAS;AACvB,gBAAMC,cAAcZ,kBAAkBa,GAAlB,CAAsBC,KAAtB,CAApB;AACAd,8BAAkBe,MAAlB,CAAyBD,KAAzB;AACA,gBAAIF,WAAJ,EAAiB;AACf,qBAAOJ,wBAAwBI,WAAxB,CAAP;AACD,aAFD,MAEO;AACL,qBAAO,EAAP;AACD;AACF,WARE,CADM,CAAX;;AAYA,iBAAOH,QAAP;AACD,SAdD;;AAgBA,YAAMO,kBAAkBR,wBACtBR,kBAAkBa,GAAlB,CAAsBR,OAAOY,OAAP,CAAeC,EAArC,CADsB,CAAxB;AAGAlB,0BAAkBe,MAAlB,CAAyBV,OAAOY,OAAP,CAAeC,EAAxC;AACAZ,mBAAWR,EAAEqB,IAAF,CAAOf,KAAP,EAAcY,eAAd,CAAX;;AAEAV,8CACKA,QADL;AAEE,WAACD,OAAOY,OAAP,CAAeC,EAAhB,GAAqBb,OAAOY;AAF9B;AAIA,eAAOX,QAAP;AACD;;AAED,SAAM,mBAAN;AACA,SAAM,+BAAN;AACEN,wBAAkBoB,GAAlB,CAAsBf,OAAOY,OAAP,CAAeC,EAArC,EAAyCb,OAAOY,OAAP,CAAeR,QAAxD;AACAH,4CACKF,KADL;AAEE,SAACC,OAAOY,OAAP,CAAeC,EAAhB,GAAqBb,OAAOY;AAF9B;AAIA,aAAOX,QAAP;;AAEF,SAAM,aAAN;AACEA,iBAAWR,EAAEqB,IAAF,CAAOf,KAAP,EAAcC,OAAOY,OAArB,CAAX;AACA,aAAOX,QAAP;;AAEF,SAAM,cAAN;AACEA,iBAAWR,EAAEqB,IAAF,CAAOf,KAAP,EAAcC,OAAOY,OAArB,CAAX;AACA,aAAOX,QAAP;;AAEF;AACE,aAAOF,KAAP;AArDJ;AAuDD,CAzDD","file":"nodes.js","sourcesContent":["const _ = require(`lodash`)\n\nconst parentChildrenMap = new Map()\n\nmodule.exports = (state = {}, action) => {\n  let newState\n  switch (action.type) {\n    case `DELETE_CACHE`:\n      return {}\n    case `CREATE_NODE`: {\n      // Remove any previously created descendant nodes as they're all due to be\n      // recreated.\n      const findChildrenRecursively = (children = []) => {\n        children = children.concat(\n          ...children.map(child => {\n            const newChildren = parentChildrenMap.get(child)\n            parentChildrenMap.delete(child)\n            if (newChildren) {\n              return findChildrenRecursively(newChildren)\n            } else {\n              return []\n            }\n          })\n        )\n\n        return children\n      }\n\n      const descendantNodes = findChildrenRecursively(\n        parentChildrenMap.get(action.payload.id)\n      )\n      parentChildrenMap.delete(action.payload.id)\n      newState = _.omit(state, descendantNodes)\n\n      newState = {\n        ...newState,\n        [action.payload.id]: action.payload,\n      }\n      return newState\n    }\n\n    case `ADD_FIELD_TO_NODE`:\n    case `ADD_CHILD_NODE_TO_PARENT_NODE`:\n      parentChildrenMap.set(action.payload.id, action.payload.children)\n      newState = {\n        ...state,\n        [action.payload.id]: action.payload,\n      }\n      return newState\n\n    case `DELETE_NODE`:\n      newState = _.omit(state, action.payload)\n      return newState\n\n    case `DELETE_NODES`:\n      newState = _.omit(state, action.payload)\n      return newState\n\n    default:\n      return state\n  }\n}\n"]}